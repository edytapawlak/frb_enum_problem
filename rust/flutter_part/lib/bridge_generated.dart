// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.49.0.
            // ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names
            
import 'dart:convert';
            import 'dart:async';
            import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

        import 'package:meta/meta.dart';
 import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;


part 'bridge_generated.freezed.dart';











abstract class Rust {
            Future<PrefixedTextAlias> generatePrefixedText({ required PrefixAlias strategy,required String basicText,dynamic hint });

FlutterRustBridgeTaskConstMeta get kGeneratePrefixedTextConstMeta;

Future<SufixedTextAlias> generateSufixedText({ required SufixAlias strategy,required String basicText,dynamic hint });

FlutterRustBridgeTaskConstMeta get kGenerateSufixedTextConstMeta;

Future<TransformedText> transformedTextFromStr({ required String str,dynamic hint });

FlutterRustBridgeTaskConstMeta get kTransformedTextFromStrConstMeta;
        }

        







enum PrefixAlias {
                    A,
B,
C,
                }

class PrefixedTextAlias {
                final PrefixAlias prefix;
final String text;

                PrefixedTextAlias({required this.prefix,required this.text,});

                
            }

enum SufixAlias {
                    A,
B,
C,
                }

class SufixedTextAlias {
                final SufixAlias sufix;
final String text;

                SufixedTextAlias({required this.sufix,required this.text,});

                
            }

@freezed
                class TransformedText with _$TransformedText {
                    const factory TransformedText.sufixed(SufixedTextAlias field0,) = TransformedText_Sufixed;
const factory TransformedText.prefixed(PrefixedTextAlias field0,) = TransformedText_Prefixed;
                }




        

class RustImpl implements Rust {
                final RustPlatform _platform;
                factory RustImpl(ExternalLibrary dylib) => RustImpl.raw(RustPlatform(dylib));

                /// Only valid on web/WASM platforms.
                factory RustImpl.wasm(FutureOr<WasmModule> module) =>
                    RustImpl(module as ExternalLibrary);
                RustImpl.raw(this._platform);
Future<PrefixedTextAlias> generatePrefixedText({ required PrefixAlias strategy,required String basicText,dynamic hint }) => _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_generate_prefixed_text(port_, api2wire_prefix_alias(strategy), _platform.api2wire_String(basicText)),
            parseSuccessData: _wire2api_prefixed_text_alias,
            
        constMeta: kGeneratePrefixedTextConstMeta,
        argValues: [strategy, basicText],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kGeneratePrefixedTextConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_prefixed_text",
            argNames: ["strategy", "basicText"],
        );
        
Future<SufixedTextAlias> generateSufixedText({ required SufixAlias strategy,required String basicText,dynamic hint }) => _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_generate_sufixed_text(port_, api2wire_sufix_alias(strategy), _platform.api2wire_String(basicText)),
            parseSuccessData: _wire2api_sufixed_text_alias,
            
        constMeta: kGenerateSufixedTextConstMeta,
        argValues: [strategy, basicText],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kGenerateSufixedTextConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "generate_sufixed_text",
            argNames: ["strategy", "basicText"],
        );
        
Future<TransformedText> transformedTextFromStr({ required String str,dynamic hint }) => _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_transformed_text_from_str(port_, _platform.api2wire_String(str)),
            parseSuccessData: _wire2api_transformed_text,
            
        constMeta: kTransformedTextFromStrConstMeta,
        argValues: [str],
        hint: hint,
        
        ));


        FlutterRustBridgeTaskConstMeta get kTransformedTextFromStrConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "transformed_text_from_str",
            argNames: ["str"],
        );
        
// Section: wire2api

String _wire2api_String(dynamic raw) {
            return raw as String;
        }
        

PrefixedTextAlias _wire2api_box_autoadd_prefixed_text_alias(dynamic raw) {
            return _wire2api_prefixed_text_alias(raw);
        }
        

SufixedTextAlias _wire2api_box_autoadd_sufixed_text_alias(dynamic raw) {
            return _wire2api_sufixed_text_alias(raw);
        }
        

int _wire2api_i32(dynamic raw) {
            return raw as int;
        }
        

PrefixAlias _wire2api_prefix_alias(dynamic raw) {
            return PrefixAlias.values[raw];
        }
        

PrefixedTextAlias _wire2api_prefixed_text_alias(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return PrefixedTextAlias(prefix: _wire2api_prefix_alias(arr[0]),
text: _wire2api_String(arr[1]),);
        }
        

SufixAlias _wire2api_sufix_alias(dynamic raw) {
            return SufixAlias.values[raw];
        }
        

SufixedTextAlias _wire2api_sufixed_text_alias(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return SufixedTextAlias(sufix: _wire2api_sufix_alias(arr[0]),
text: _wire2api_String(arr[1]),);
        }
        

TransformedText _wire2api_transformed_text(dynamic raw) {
            switch (raw[0]) {
                case 0: return TransformedText_Sufixed(_wire2api_box_autoadd_sufixed_text_alias(raw[1]),);
case 1: return TransformedText_Prefixed(_wire2api_box_autoadd_prefixed_text_alias(raw[1]),);
                default: throw Exception("unreachable");
            }
        }
        

int _wire2api_u8(dynamic raw) {
            return raw as int;
        }
        

Uint8List _wire2api_uint_8_list(dynamic raw) {
            return raw as Uint8List;
        }
        
}

// Section: api2wire


@protected
                    int api2wire_i32(int raw) {
                        return raw;
                    }
@protected
                    int api2wire_prefix_alias(PrefixAlias raw) {
                        return api2wire_i32(raw.index);
                    }
@protected
                    int api2wire_sufix_alias(SufixAlias raw) {
                        return api2wire_i32(raw.index);
                    }
@protected
                    int api2wire_u8(int raw) {
                        return raw;
                    }



class RustPlatform extends FlutterRustBridgeBase<RustWire> {
                RustPlatform(ffi.DynamicLibrary dylib) : super(RustWire(dylib));
// Section: api2wire

@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
                        return api2wire_uint_8_list(utf8.encoder.convert(raw));
                    }




@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
                        final ans = inner.new_uint_8_list_0(raw.length);
                    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
                    return ans;
                    }
// Section: api_fill_to_wire












}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_generate_prefixed_text(
    int port_,
    int strategy,
    ffi.Pointer<wire_uint_8_list> basic_text,
  ) {
    return _wire_generate_prefixed_text(
      port_,
      strategy,
      basic_text,
    );
  }

  late final _wire_generate_prefixed_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_prefixed_text');
  late final _wire_generate_prefixed_text = _wire_generate_prefixed_textPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_sufixed_text(
    int port_,
    int strategy,
    ffi.Pointer<wire_uint_8_list> basic_text,
  ) {
    return _wire_generate_sufixed_text(
      port_,
      strategy,
      basic_text,
    );
  }

  late final _wire_generate_sufixed_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_sufixed_text');
  late final _wire_generate_sufixed_text = _wire_generate_sufixed_textPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_transformed_text_from_str(
    int port_,
    ffi.Pointer<wire_uint_8_list> str,
  ) {
    return _wire_transformed_text_from_str(
      port_,
      str,
    );
  }

  late final _wire_transformed_text_from_strPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_transformed_text_from_str');
  late final _wire_transformed_text_from_str =
      _wire_transformed_text_from_strPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}



typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
